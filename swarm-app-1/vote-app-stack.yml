version: "3"
services:
    redis:
        image: redis
        networks:
            - frontend
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
    voteapp:
        image: nattesharan/votingapp
        ports:
            - 80:80
        networks:
            - frontend
        depends_on:
            - redis
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
            restart_policy:
                condition: on-failure
    db:
        image: postgres:9.4
        volumes:
            - db-data:/var/lib/postgresql/data
        networks:
            - backend
        environment:
            - POSTGRES_HOST_AUTH_METHOD=trust
        deploy:
            placement:
                constraints: [node.role == manager]
    worker:
        image: nattesharan/votingappworker
        networks:
            - frontend
            - backend
        depends_on:
            - db
            - redis
        deploy:
            mode: replicated
            replicas: 1
            labels: [APP=VOTING]
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints: [node.role == manager]
    result:
        image: nattesharan/votingapp_result
        ports:
            - 3000:80
        networks:
            - backend
        depends_on:
            - db
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
networks:
    backend:
    frontend:
volumes:
    db-data: